name: Deploy to Firebase Hosting

on:
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Where to deploy'
        required: true
        default: 'preview'
        type: choice
        options: [preview, production]
        
env:
  CHANNEL_ID: ${{ github.event_name == 'pull_request' &&
                  format('pr-{0}', github.event.pull_request.number)
                  || (inputs.environment == 'production' && 'live')
                  || format('preview-{0}', github.run_number) }}
                  
permissions:
  checks: write
  contents: read
  id-token: write  # Needed only if switching to OIDC in the future

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug ‚Äì show env
      run: |
        echo "event_name        : ${{ github.event_name }}"
        echo "inputs.environment: ${{ inputs.environment }}"
        echo "CHANNEL_ID        : $CHANNEL_ID"

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install firebase-tools
      run: npm install -g firebase-tools

    - name: Install dependencies
      run: npm install

    - name: Build React app
      run: npm run build
      env:
        VITE_FIREBASE_PROJECT_ID: my-smart-shopper-e0c23
        VITE_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
        VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
        VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
        VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
        VITE_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
        VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
        VITE_BACKEND_URL: ${{ secrets.VITE_BACKEND_URL }}

    - name: Deploy to Firebase Preview
      if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'preview')
      uses: FirebaseExtended/action-hosting-deploy@v0.9.0
      with:
        repoToken: ${{ github.token }}
        firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        projectId: my-smart-shopper-e0c23
        entryPoint: .
        channelId: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.pull_request.number) || format('preview-{0}', github.run_number) }}
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

    - name: Deploy to Firebase Production
      if: (github.event_name == 'workflow_dispatch' && inputs.environment == 'production') || (github.event_name != 'pull_request' && github.ref == 'refs/heads/main')
      run: |
        echo "üî• Writing service account key"
        echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > $HOME/firebase.json
        export GOOGLE_APPLICATION_CREDENTIALS="$HOME/firebase.json"

        echo "üöÄ Deploying to Firebase Production (my-smart-shopper-e0c23)..."
        firebase deploy --project my-smart-shopper-e0c23 --only hosting || {
          echo "‚ùå Firebase deployment failed"
          cat $HOME/firebase.json | jq .
          exit 1
        }

        echo "‚úÖ Production deployment complete."
        rm -f $HOME/firebase.json
      env:
        GOOGLE_APPLICATION_CREDENTIALS: $HOME/firebase.json
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

    - name: Test deployed Gemini endpoint 2
      env:
        # $CHANNEL_ID is already set at the job level
        BASE_URL: >-
          ${{ env.CHANNEL_ID == 'live'
              && 'https://my-smart-shopper-e0c23.web.app'
              || format('https://{0}--my-smart-shopper-e0c23.web.app', env.CHANNEL_ID) }}
      run: |
        echo "üîÑ Pinging $BASE_URL/api/autoMapItems"
        RESPONSE=$(curl -s -L -X POST "$BASE_URL/api/autoMapItems" \
                     -H "Content-Type: application/json" \
                     -d '{"prompt":"test"}')

        echo "üîç Response: $RESPONSE"
        if echo "$RESPONSE" | grep -q 'candidates'; then
          echo "‚úÖ API is working as expected"
        else
          echo "‚ùå Unexpected or missing response from API"
          exit 1
        fi
