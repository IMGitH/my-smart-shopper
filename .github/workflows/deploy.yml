name: Deploy to Firebase Hosting

on:
  pull_request:
    branches: [main]

  # manual ‚ÄúRun workflow‚Ä¶‚Äù button
  workflow_dispatch:
    inputs:
      environment:
        description: Where to deploy
        required: true
        default: preview
        type: choice
        options: [preview, production]

  # automatic prod deploy on merge to main
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    # ‚îÄ‚îÄ shared variables ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    env:
      # pr-123  |  preview-87  |  live
      CHANNEL_ID: >-
        ${{ github.event_name == 'pull_request'                           && format('pr-{0}', github.event.pull_request.number)
            || (github.event_name == 'workflow_dispatch'
                && inputs.environment == 'production')                    && 'live'
            || (github.event_name == 'push'
                && github.ref == 'refs/heads/main')                       && 'live'
            || format('preview-{0}', github.run_number) }}

    steps:
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ housekeeping ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - uses: actions/checkout@v4

    - name: Debug ‚Äì echo derived vars
      run: |
        echo "event_name        : ${{ github.event_name }}"
        echo "inputs.environment: ${{ inputs.environment }}"
        echo "github.ref        : ${{ github.ref }}"
        echo "CHANNEL_ID        : $CHANNEL_ID"

    - uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install CLI & app deps
      run: |
        npm i -g firebase-tools
        npm ci

    - name: Build Vite / React app
      env:
        VITE_FIREBASE_PROJECT_ID: my-smart-shopper-e0c23
        VITE_FIREBASE_API_KEY:        ${{ secrets.FIREBASE_API_KEY }}
        VITE_FIREBASE_AUTH_DOMAIN:    ${{ secrets.FIREBASE_AUTH_DOMAIN }}
        VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
        VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
        VITE_FIREBASE_APP_ID:         ${{ secrets.FIREBASE_APP_ID }}
        VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
        VITE_BACKEND_URL:             ${{ secrets.VITE_BACKEND_URL }}
      run: npm run build

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ preview deploy ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Deploy to Firebase preview
      if: github.event_name == 'pull_request' ||
          (github.event_name == 'workflow_dispatch' &&
           (inputs.environment == '' || inputs.environment == 'preview'))
      id: deploy_preview
      uses: FirebaseExtended/action-hosting-deploy@v0.9.0
      with:
        repoToken:              ${{ github.token }}
        firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        projectId:              my-smart-shopper-e0c23
        entryPoint:             .
        channelId:              ${{ env.CHANNEL_ID }}
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ production deploy ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Deploy to Firebase production
      if: (github.event_name == 'workflow_dispatch' && inputs.environment == 'production') ||
          (github.event_name == 'push' && github.ref == 'refs/heads/main')
      run: |
        echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > "$HOME/firebase.json"
        export GOOGLE_APPLICATION_CREDENTIALS="$HOME/firebase.json"
        firebase deploy --project my-smart-shopper-e0c23 --only hosting
        rm "$HOME/firebase.json"
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ smoke-test the deployed API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Test deployed Gemini endpoint
      env:
        BASE_URL: >-
          ${{ env.CHANNEL_ID == 'live'
              && 'https://my-smart-shopper-e0c23.web.app'
              || format('https://my-smart-shopper-e0c23--{0}.web.app', env.CHANNEL_ID) }}
      run: |
        echo "üîÑ Pinging $BASE_URL/api/autoMapItems"
        RESPONSE=$(curl -s -L -X POST "$BASE_URL/api/autoMapItems" \
                   -H "Content-Type: application/json" \
                   -d '{"prompt":"test"}')
        echo "üîç Response: $RESPONSE"
        if echo "$RESPONSE" | grep -q '"candidates"'; then
          echo "‚úÖ API is working as expected"
        else
          echo "‚ùå API returned unexpected payload"
          exit 1
        fi
