name: Deploy to Firebase Hosting

on:
  pull_request:
    branches:
      - main  # Auto-deploy preview for PRs targeting main

  workflow_dispatch:
    inputs:
      environment:
        description: 'Where to deploy'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - production

permissions:
  checks: write
  contents: read  # needed for actions/checkout

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      CHANNEL_ID: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || (inputs.environment == 'production' && 'live') || format('preview-{0}', github.run_number) }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Debug workspace structure
      run: |
        echo "Current path: $(pwd)"
        echo "Contents:"
        ls -la
        echo "server dir content:"
        ls -la server || echo "‚ùå server/ missing!"
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install frontend dependencies
      run: npm install

    - name: Build React app with Firebase config
      run: npm run build
      env:
        VITE_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
        VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
        VITE_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
        VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
        VITE_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
        VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
        VITE_BACKEND_URL: ${{ secrets.VITE_BACKEND_URL }}

    - name: Check build output
      run: ls -la dist && ls -la dist/index.html

    - name: Deploy to Firebase Preview (Pull Request)
      if: github.event_name == 'pull_request'
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: ${{ github.token }}
        firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        projectId: my-smart-shopper-e0c23
        entryPoint: .
        channelId: pr-${{ github.event.pull_request.number }}
        target: live
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

    - name: Deploy to Firebase Production
      if: github.event_name != 'pull_request'
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: ${{ github.token }}
        firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        projectId: my-smart-shopper-e0c23
        entryPoint: .
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    
    - name: Test deployed Gemini endpoint
      run: |
        CHANNEL="${CHANNEL_ID}"
        if [ "$CHANNEL" = "live" ]; then
          BASE_URL="https://my-smart-shopper-e0c23.web.app"
        else
          BASE_URL="https://${CHANNEL}--my-smart-shopper-e0c23.web.app"
        fi

        echo "üîÑ Pinging $BASE_URL/api/autoMapItems"
        RESPONSE=$(curl -s -X POST "$BASE_URL/api/autoMapItems" \
          -H "Content-Type: application/json" \
          -d '{"prompt": "test"}')
        
        echo "üîç Response:"
        echo "$RESPONSE"
        
        # Optionally, check if it contains a Gemini response
        if echo "$RESPONSE" | grep -q 'candidates'; then
          echo "‚úÖ API is working as expected"
        else
          echo "‚ùå Unexpected or missing response from API"
          exit 1
        fi
